{"version":3,"sources":["components/status/statuses.js","components/status/useStatus.js","components/status/index.js","components/status/useRefetch.js","components/useIssues.js","components/header/index.js","components/components/skeleton.js","components/components/component/statuses.js","components/components/component/status.js","components/components/component/useStatus.js","components/components/component/index.js","components/useDidMount.js","components/components/index.js","components/incidents/incident/index.js","components/incidents/skeleton.js","components/incidents/index.js","components/footer/index.js","components/App.js","serviceWorker.js","index.js"],"names":["message","backgroundColour","getComponentLabelPercent","components","label","filter","component","labels","find","componentLabel","name","length","StatusBar","styled","div","props","Status","h2","Reload","button","Code","code","loading","error","refetch","useState","status","setStatus","useEffect","statusSet","statuses","useStatus","updateTimeAgoDep","moment","Date","localStorage","getItem","fromNow","timeAgo","setTimeAgo","interval","setInterval","clearInterval","useRefetch","hasError","JSON","stringify","errors","onClick","results","setResults","setError","setLoading","fetchData","parse","fetch","process","then","response","json","data","setItem","catch","toString","Logo","h1","img","Header","a","href","src","alt","operational","colour","performanceIssues","partialOutage","majorOutage","unknown","Object","values","toLowerCase","Component","title","hasMounted","setHasMounted","useDidMount","sorted","slice","sort","b","localeCompare","map","id","Incident","active","Details","Title","Comment","Created","MaxWidthMarkdown","maxWidth","children","style","incident","containerRef","useRef","myRef","padding","getWidth","useCallback","current","offsetWidth","undefined","width","setWidth","handleResize","window","addEventListener","removeEventListener","useResize","closed_at","created_at","format","toUpperCase","ref","body","Container","NoFound","incidents","now","filtered","updatedAt","updated_at","diff","Footer","Branding","visible","REACT_APP_BRANDING","rel","target","ComponentsContainer","useIssues","componentsLoading","componentsError","componentsResults","componentsRefetch","incidentsLoading","incidentsError","incidentsResults","incidentsRefetch","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.c2aa6674.chunk.js","sourcesContent":["export default {\n  operational: {\n    message: \"All Systems Operational\",\n    backgroundColour: \"#3da751\",\n  },\n  issues: {\n    message: \"Some systems are experiencing issues\",\n    backgroundColour: \"#4990e2\",\n  },\n  outage: {\n    message: \"Some systems are experiencing a major outage\",\n    backgroundColour: \"#d94430\",\n  },\n};\n","import { useState, useEffect } from \"react\";\nimport statuses from \"./statuses\";\n\nexport default (components) => {\n  const [status, setStatus] = useState();\n\n  useEffect(() => {\n    let statusSet = false;\n\n    if (getComponentLabelPercent(components, \"operational\") < 70) {\n      setStatus(statuses.issues);\n      statusSet = true;\n    }\n\n    if (getComponentLabelPercent(components, \"major outage\") > 0) {\n      setStatus(statuses.outage);\n      statusSet = true;\n    }\n\n    if (!statusSet) setStatus(statuses.operational);\n  }, [components]);\n\n  return [status];\n};\n\nconst getComponentLabelPercent = (components, label) =>\n  (components.filter((component) =>\n    component.labels.find((componentLabel) => componentLabel.name === label)\n  ).length *\n    100) /\n  components.length;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useStatus from \"./useStatus\";\nimport useRefetch from \"./useRefetch\";\n\nconst StatusBar = styled.div`\n  background-color: ${(props) =>\n    props.backgroundColour ? props.backgroundColour : \"#b1b1b1\"};\n  color: white;\n  padding: 16px;\n  border-radius: 3px;\n  margin-bottom: 32px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  transition: 0.3s;\n`;\n\nconst Status = styled.h2`\n  font-size: 20px;\n  margin: 0;\n  font-weight: normal;\n`;\n\nconst Reload = styled.button`\n  background-color: transparent;\n  color: white;\n  text-decoration: underline;\n  border: none;\n  cursor: pointer;\n  text-align: right;\n  padding: 0;\n`;\n\nconst Code = styled.code`\n  white-space: pre-wrap;\n  display: block;\n`;\n\n// TODO: change all systems status based on current status of all components\nexport default ({ loading, error, components, refetch }) => {\n  const [status] = useStatus(components);\n  const [timeAgo] = useRefetch(refetch, loading);\n\n  return (\n    <>\n      {error.hasError && (\n        <Code>\n          <div>An error occured</div>\n          <div>\n            You may have exceeded the rate limit. Try again in 1 hour to fetch\n            the latest data.\n          </div>\n          {JSON.stringify(error.errors, null, 3)}\n        </Code>\n      )}\n      <StatusBar backgroundColour={status?.backgroundColour}>\n        <Status>{status?.message}</Status>\n        <Reload onClick={refetch}>{loading ? \"reloading\" : timeAgo}</Reload>\n      </StatusBar>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport moment from \"moment\";\n\nexport default (refetch, updateTimeAgoDep) => {\n  const [timeAgo, setTimeAgo] = useState(\n    moment(\n      new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n    ).fromNow()\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (\n        new Date(localStorage.getItem(`issueStatusLastFetchcomponent`)) <\n        new Date() - 240000\n      ) {\n        refetch(() => {\n          setTimeAgo(\n            moment(\n              new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n            ).fromNow()\n          );\n        });\n      } else {\n        setTimeAgo(\n          moment(\n            new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n          ).fromNow()\n        );\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [refetch]);\n\n  useEffect(() => {\n    setTimeAgo(\n      moment(\n        new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n      ).fromNow()\n    );\n  }, [updateTimeAgoDep]);\n\n  return [timeAgo];\n};\n","import { useState, useEffect } from \"react\";\n\nexport default (label) => {\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // GitHub rate limiting: 60 requests per hour/unauthenticated - fetches 15 times per hour / sending 30 requests (2 requests per fetch) and caches in localStorage\n    if (\n      new Date(localStorage.getItem(`issueStatusLastFetch${label}`)) <\n      new Date() - 240000\n    ) {\n      fetchData(setLoading, setError, setResults, label);\n    } else {\n      setResults(JSON.parse(localStorage.getItem(`issueStatus${label}`)));\n      setLoading(false);\n      setError();\n    }\n  }, [label]);\n\n  return [\n    loading,\n    error,\n    results || [],\n    () => fetchData(setLoading, setError, setResults, label),\n  ];\n};\n\nconst fetchData = (setLoading, setError, setResults, label) => {\n  setLoading(true);\n  fetch(\n    `https://api.github.com/repos/${process.env.REACT_APP_REPOSITORY}/issues?state=all&labels=issue status,${label}`\n  )\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => {\n      setError();\n      localStorage.setItem(`issueStatusLastFetch${label}`, new Date());\n      localStorage.setItem(`issueStatus${label}`, JSON.stringify(data));\n      setResults(data);\n      setLoading(false);\n    })\n    .catch((error) => {\n      setError(error.toString());\n      localStorage.setItem(`issueStatusLastFetch${label}`, new Date());\n      setResults(JSON.parse(localStorage.getItem(`issueStatus${label}`)));\n      setLoading(false);\n    });\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Title = styled.h1`\n  text-align: center;\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nconst Logo = styled.img`\n  max-width: 100%;\n  max-height: 100px;\n`;\n\nconst Header = styled.a`\n  text-align: center;\n  margin-bottom: 16px;\n  display: block;\n`;\n\nexport default () =>\n  process.env.REACT_APP_LOGO || process.env.REACT_APP_NAME ? (\n    <Header href={process.env.REACT_APP_LINK || \"#\"}>\n      {process.env.REACT_APP_LOGO ? (\n        <Logo\n          src={process.env.REACT_APP_LOGO}\n          alt={process.env.REACT_APP_NAME}\n        />\n      ) : (\n        <Title>{process.env.REACT_APP_NAME}</Title>\n      )}\n    </Header>\n  ) : null;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  height: 44px;\n  border-radius: 3px;\n  background-color: #f7f8f9;\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","export default {\n  operational: {\n    name: \"Operational\",\n    colour: \"#247234\",\n    backgroundColour: \"rgba(61, 167, 81, 0.1)\",\n  },\n  performanceIssues: {\n    name: \"Performance Issues\",\n    colour: \"#2f5888\",\n    backgroundColour: \"rgba(73, 144, 226, 0.1)\",\n  },\n  partialOutage: {\n    name: \"Partial Outage\",\n    colour: \"#74582a\",\n    backgroundColour: \"rgba(255, 198, 103, 0.1)\",\n  },\n  majorOutage: {\n    name: \"Major Outage\",\n    colour: \"#8e3b31\",\n    backgroundColour: \"rgba(217, 68, 48, 0.1)\",\n  },\n  unknown: {\n    name: \"Unknown\",\n    colour: \"#6e6b6b\",\n    backgroundColour: \"rgba(177, 177, 177, 0.1)\",\n  },\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useStatus from \"./useStatus\";\n\nconst Status = styled.div`\n  color: ${(props) => props.colour};\n  background-color: ${(props) => props.backgroundColour};\n  padding: 5px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n  transition: 0.3s;\n`;\n\nexport default ({ labels }) => {\n  const [status] = useStatus(labels);\n\n  return (\n    <Status colour={status?.colour} backgroundColour={status?.backgroundColour}>\n      {status?.name}\n    </Status>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport statuses from \"./statuses\";\n\nexport default (labels) => {\n  const [status, setStatus] = useState();\n\n  useEffect(() => {\n    setStatus(\n      Object.values(statuses).find((status) =>\n        labels.find((label) => label.name === status.name.toLowerCase())\n      )\n    );\n  }, [labels]);\n\n  if (!status) setStatus(statuses.unknown);\n\n  return [status];\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\n\nconst Component = styled.div`\n  background-color: #f7f8f9;\n  padding: 8px 16px;\n  border-radius: 3px;\n  justify-content: space-between;\n  align-items: center;\n  display: flex;\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport default ({ component }) => {\n  return (\n    <Component>\n      {component.title} <Status labels={component.labels} />\n    </Component>\n  );\n};\n","import { useEffect, useState } from \"react\";\n\nexport default () => {\n  const [hasMounted, setHasMounted] = useState();\n\n  useEffect(() => {\n    setHasMounted(true);\n  }, []);\n\n  return [hasMounted];\n};\n","import React from \"react\";\nimport Skeleton from \"./skeleton\";\nimport Component from \"./component\";\nimport useDidMount from \"../useDidMount\";\n\nexport default ({ loading, components }) => {\n  const [hasMounted] = useDidMount();\n\n  // Copy and sort by the GitHub issue title\n  const sorted = components.slice().sort((a, b) => a.title.localeCompare(b.title))\n\n  return !loading || hasMounted ? (\n    sorted?.length > 0 ? (\n      sorted?.map((component) => (\n        <Component key={component.id} component={component} />\n      ))\n    ) : (\n      <p>No Components found.</p>\n    )\n  ) : (\n    <>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </>\n  );\n};\n","import React from \"react\";\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst Incident = styled.div`\n  transition: 0.3s;\n  border-left: 16px solid\n    ${(props) =>\n      props.active ? \"rgba(177, 177, 177,0.2)\" : \"rgba(73, 144, 226, 0.2)\"};\n  background-color: white;\n  border-radius: 3px;\n  padding: 16px;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  margin-top: 8px;\n\n  :not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nconst Details = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 3px;\n`;\n\nconst Title = styled.div`\n  margin-right: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: #1e1e1e;\n`;\n\nconst Comment = styled.div`\n  color: #1e1e1e;\n  p {\n    white-space: break-spaces;\n  }\n`;\n\nconst Status = styled.div`\n  color: ${(props) => (props.active ? \"#6e6b6b\" : \"#2f5888\")};\n  background-color: ${(props) =>\n    props.active ? \"rgba(177, 177, 177, 0.1)\" : \"rgba(73, 144, 226, 0.1)\"};\n  padding: 5px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n  transition: 0.3s;\n`;\n\nconst Created = styled.div`\n  font-size: 13px;\n  color: #6e6b6b;\n  font-weight: bold;\n`;\n\n// This function keeps track of the width of an element, with some padding added.\nconst useResize = (myRef, padding) => {\n  const getWidth = useCallback(() => myRef?.current?.offsetWidth, [myRef]);\n\n  const [width, setWidth] = useState(undefined);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWidth(getWidth());\n    };\n\n    if (myRef.current) {\n      setWidth(getWidth());\n    }\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [myRef, getWidth]);\n\n  return width && width > padding ? width - padding : width;\n};\n\n\nconst MaxWidthMarkdown = ({ maxWidth, children }) => {\n  const components = {\n    // This custom renderer changes how images are rendered; we use it to\n    // constrain the max width of an image to its container.\n    img: ({\n      alt,\n      src,\n      title,\n    }) => (\n      <img\n        alt={alt}\n        src={src}\n        title={title}\n        style={{ maxWidth: maxWidth }}  />\n    ),\n  };\n\n  return (\n    <ReactMarkdown\n      children={children}\n      components={components}\n    />\n  );\n};\n\nexport default ({ incident }) => {\n  const containerRef = useRef(null);\n  const maxWidth = useResize(containerRef, 0 /* padding */);\n\n  return (\n    <Incident active={incident.closed_at}>\n      <Details>\n        <Created>\n          {moment(incident.created_at)\n            .format(\"MMMM Do YYYY, h:mm a\")\n            .toUpperCase()}\n        </Created>\n        <Status active={incident.closed_at}>\n          {incident.closed_at ? \"Closed\" : \"Active\"}\n        </Status>\n      </Details>\n      <Title>{incident.title}</Title>\n      <Comment ref={containerRef}>\n        <MaxWidthMarkdown maxWidth={maxWidth} children={incident.body} />\n      </Comment>\n    </Incident>\n  );\n};\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  height: 84px;\n  border-radius: 3px;\n  background-color: white;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Incident from \"./incident\";\nimport Skeleton from \"./skeleton\";\nimport useDidMount from \"../useDidMount\";\nimport moment from \"moment\";\n\nconst Container = styled.div`\n  margin: 32px auto 0 auto;\n  max-width: 1040px;\n`;\n\nconst Title = styled.div`\n  padding: 0 16px;\n  font-size: 20px;\n  margin-bottom: 16px;\n`;\n\nconst NoFound = styled.div`\n  margin: 0 8px;\n`;\n\n// Maximum number of days to show\nconst incidentsVisibilityDays = process.env.REACT_APP_INCIDENTS_VISIBILITY_DAYS ?\n  +process.env.REACT_APP_INCIDENTS_VISIBILITY_DAYS : 30;\n\nexport default ({ loading, incidents }) => {\n  const [hasMounted] = useDidMount();\n\n  // Filter incidents\n  const now = moment();\n  //const now = moment([2025, 0 /* 0-indexed */, 15]);\n  const filtered = incidents?.filter(incident => {\n    const updatedAt = moment(incident.updated_at);\n    const diff = now.diff(updatedAt, \"days\");\n\n    return diff < incidentsVisibilityDays;\n  });\n\n  return (\n    <Container>\n      <Title title={`Incidents from last ${incidentsVisibilityDays} days`}>Incidents</Title>\n      {!loading || hasMounted ? (\n        filtered?.length > 0 ? (\n          filtered?.map((incident) => (\n            <Incident key={incident.id} incident={incident} />\n          ))\n        ) : (\n          <NoFound>No Incidents found.</NoFound>\n        )\n      ) : (\n        <>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </>\n      )}\n    </Container>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Footer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 16px;\n`;\n\nconst Branding = styled.a`\n  color: #6e6b6b;\n  font-size: 13px;\n  text-decoration: none;\n  transition: 0.3s;\n  display: ${(props) => (props.visible ? \"block\" : \"none\")};\n\n  :hover {\n    opacity: 0.9;\n  }\n`;\n\nexport default () => (\n  <Footer>\n    <div></div>\n    <Branding\n      visible={process.env.REACT_APP_BRANDING !== \"false\"}\n      href=\"https://github.com/tadhglewis/issue-status\"\n      rel=\"noopener\"\n      target=\"_blank\"\n    >\n      Powered by Issue Status\n    </Branding>\n  </Footer>\n);\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\nimport useIssues from \"./useIssues\";\nimport Header from \"./header\";\nimport Components from \"./components\";\nimport Incidents from \"./incidents\";\nimport Footer from \"./footer\";\n\nconst Container = styled.div`\n  max-width: 1008px;\n  padding: 16px;\n  margin: 16px auto;\n`;\n\nconst ComponentsContainer = styled.div`\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  border-radius: 3px;\n  background-color: white;\n  padding: 16px;\n`;\n\nexport default () => {\n  // loading, errors, results, refetch\n  const [\n    componentsLoading,\n    componentsError,\n    componentsResults,\n    componentsRefetch,\n  ] = useIssues(\"component\");\n  const [\n    incidentsLoading,\n    incidentsError,\n    incidentsResults,\n    incidentsRefetch,\n  ] = useIssues(\"incident\");\n\n  return (\n    <Container>\n      <Header />\n      <ComponentsContainer>\n        <Status\n          loading={componentsLoading || incidentsLoading}\n          error={{\n            hasError: componentsError || incidentsError,\n            errors: { componentsError, incidentsError },\n          }}\n          components={componentsResults}\n          refetch={() => {\n            componentsRefetch();\n            incidentsRefetch();\n          }}\n        />\n        <Components\n          loading={componentsLoading}\n          components={componentsResults}\n        />\n      </ComponentsContainer>\n      <Incidents loading={incidentsLoading} incidents={incidentsResults} />\n      <Footer />\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}